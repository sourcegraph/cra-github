github:
  base_url: "https://api.github.com"
  check_name: "Amp Code Review"
  development_mode: true
  bot_username: "amp-code-review-agent"

queue:
  max_workers: 20
  max_queue_size: 100
  retry_after_seconds: 60

# Diff splitting configuration
diff_splitting:
  max_chunk_size: 500000 # 500k characters per chunk
  max_concurrent: 3

server:
  port: "${PORT:-5053}"
  debug: "${DEBUG:-false}"

amp:
  timeout: "${AMP_TIMEOUT}"
  command: "npx --yes @sourcegraph/amp@latest"
  server_url: "${AMP_SERVER_URL}"
  settings:
    amp.url: "${AMP_SERVER_URL}"
    amp.mcpServers:
      github:
        command: "sh"
        args:
          - "-c"
          - "cd ${GITHUB_APP_CWD} && pnpm run mcp"
        env:
          GITHUB_APP_CWD: "${GITHUB_APP_CWD}"
          GITHUB_APP_ID: "${GITHUB_APP_ID}"
          GITHUB_APP_PRIVATE_KEY_PATH: "${GITHUB_APP_PRIVATE_KEY_PATH}"

  prompt_template: |
    Review this code diff as a senior developer. Look for bugs, clear logic errors, and code quality problems.
    Flag significant security concerns (leaked credentials, SQL injection, etc.), but do not mark minor concerns as issues.
    Likewise, flag significant performance concerns (memory leaks, deadlocks, long-lived requests), but do not mark minor concerns as issues.
    Do not use the oracle to review code.

    Focus on:
    - Logic errors
    - Bug-prone patterns
    - Code quality issues
    - Significant security and performance problems
    - Obvious typos/misspellings

    Pull request details:
    __PR_DETAILS_CONTENT__

    Diff to review:
    __DIFF_CONTENT__

    Review the diff content to identify issues. If you find any issues, leave specific inline comments for each issue found.

    Always leave actionable, specific comments with suggested fixes.

    Suggestions are optional snippets of code that can directly replace the full line the indicated issue is on. If provided, the suggestion should be just code-- no thought process included.
    If there is no simple code suggestion you can provide to fix the issue succinctly, provide null as the suggestion value instead.
    Suggestions can only be left on "new" line_type issues, not on "old" issues. For "old" issues, the suggestion should be null.

    Tools available to complete the code review process:
    __TOOL_CONTENT__

    After you have completed the code review process:

    Leave a general comment summarizing the review, including:
    * A brief summary of the changes reviewed
    * List out critical issues and blockers that need to be addressed
    * Any high-level feedback or suggestions

  tools:
    - name: leave_general_comment
      description: Leave general comments on pull requests
      instructions:
        - "Use this tool to leave general comments on the pull request"
        - "This will post your comment to the overall pull request discussion"
        - "Use for summary comments, overall feedback, or general observations"
        - "Required: message, owner, repo, pr_number"
        - "Example: 'Overall the code looks good, just a few minor suggestions'"
    - name: leave_inline_comment
      description: Leave inline comments on specific lines in pull requests
      instructions:
        - "Use this tool to leave comments on specific lines of code"
        - "This will post your comment directly on the line in the diff view via PR review"
        - "Required: message, owner, repo, pr_number, path, line"
        - "Optional: commit_sha (will be fetched from PR if not provided)"
        - "Example: Comment on line 25 of src/auth.js about missing error handling"
    - name: get_pr_comments
      description: Get all comments on a pull request
      instructions:
        - "Use to retrieve existing comments on the pull request"
        - "Required: owner, repo, pr_number"
        - "Returns array of comments and total count"
        - "Helpful to see what feedback has already been given before adding new comments"
